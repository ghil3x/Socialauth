"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 1.9.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'f-b*!mk!ryv@21@v5sy4k_ds(tl$*9b%f+x(5j5)xc_-bocbin'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'socialauth',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.twitter',
    'rest_framework',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTH_USER_MODEL = 'socialauth.User'

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.core.context_processors.request',
            ],
        },
    },
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

LOGIN_REDIRECT_URL = "/"

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

"""
TEMPLATE_CONTEXT_PROCESSORS = (
    "django.core.context_processors.request",
    "django.contrib.auth.context_processors.auth",
    "allauth.account.context_processors.account",
    "allauth.socialaccount.context_processors.socialaccount",
)
"""

WSGI_APPLICATION = 'mysite.wsgi.application'

SITE_ID = 1

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_L10N = True

USE_TZ = True

SITE_ID = 1

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


#ACCOUNT_SIGNUP_FORM_CLASS = 'mysite.forms.SignupForm'
#A string pointing to a custom form class (e.g. ‘myapp.forms.SignupForm’) that is used during signup to ask the user for additional input (e.g. newsletter signup, birth date). This class should implement a def signup(self, request, user) method, where user represents the newly signed up user.

ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter'
#Specifies the adapter class to use, allowing you to alter certain default behaviour.

ACCOUNT_AUTHENTICATION_METHOD = 'email' 
#Specifies the login method to use – whether the user logs in by entering their username, e-mail address, or either one of both. Setting this to 'email' requires ACCOUNT_EMAIL_REQUIRED=True

#ACCOUNT_CONFIRM_EMAIL_ON_GET = True
#Determines whether or not an e-mail address is automatically confirmed by a mere GET request.

#ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = settings.LOGIN_URL
#The URL to redirect to after a successful e-mail confirmation, in case no user is logged in.

ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = None
#The URL to redirect to after a successful e-mail confirmation, in case of an authenticated user. Set to None to use settings.LOGIN_REDIRECT_URL.

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
#Determines the expiration date of email confirmation mails (# of days).

ACCOUNT_EMAIL_CONFIRMATION_HMAC = False
#In order to verify an email address a key is mailed identifying the email address to be verified. In previous versions, a record was stored in the database for each ongoing email confirmation, keeping track of these keys. Current versions use HMAC based keys that do not require server side state.

ACCOUNT_EMAIL_REQUIRED = True
#The user is required to hand over an e-mail address when signing up.

ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'
#The name of the field containing the username, if any. See custom user models.
ACCOUNT_EMAIL_VERIFICATION = 'none'
#Determines the e-mail verification method during signup – choose one of 'mandatory', 'optional', or 'none'. When set to 'mandatory' the user is blocked from logging in until the email address is verified. Choose 'optional' or 'none' to allow logins with an unverified e-mail address. In case of 'optional', the e-mail verification mail is still sent, whereas in case of 'none' no e-mail verification mails are sent.

ACCOUNT_EMAIL_SUBJECT_PREFIX = 'django.contrib.sites'
#Subject-line prefix to use for email messages sent. By default, the name of the current Site (django.contrib.sites) is used.

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http'
#The default protocol used for when generating URLs, e.g. for the password forgotten procedure. Note that this is a default only – see the section on HTTPS for more information.

ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
#Number of failed login attempts. When this number is exceeded, the user is prohibited from logging in for the specified ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT seconds. Set to None to disable this functionality. Important: while this protects the allauth login view, it does not protect Django’s admin login from being brute forced.

ACCOUNT_SIGNUP_PASSWORD_VERIFICATION = True
#When signing up, let the user type in their password twice to avoid typo’s.

ACCOUNT_USERNAME_REQUIRED = False
#The user is required to enter a username when signing up. Note that the user will be asked to do so even if ACCOUNT_AUTHENTICATION_METHOD is set to email. Set to False when you do not wish to prompt the user to enter a username.

LOGIN_REDIRECT_URL = '/'

SOCIALACCOUNT_STORE_TOKENS = True
#Indicates whether or not the access tokens are stored in the database.

SOCIALACCOUNT_QUERY_EMAIL = True

SOCIALACCOUNT_PROVIDERS = {
    'twitter':{}, 
    'facebook':
       {'METHOD': 'oauth2',
        'SCOPE': ['email', 'public_profile', 'user_friends'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'FIELDS': [
            'id',
            'email',
            'name',
            'first_name',
            'last_name',
            'verified',
            'locale',
            'timezone',
            'link',
            'gender',
            'updated_time'],
        'EXCHANGE_TOKEN': True,
        'LOCALE_FUNC': 'path.to.callable',
        'VERIFIED_EMAIL': False,
        'VERSION': 'v2.4'}, 
    'google':
        { 'SCOPE': ['profile', 'email'],
          'AUTH_PARAMS': { 'access_type': 'online' } }}
#Dictionary containing provider specific settings.

SOCIALACCOUNT_EMAIL_VERIFICATION = ACCOUNT_EMAIL_VERIFICATION
#As ACCOUNT_EMAIL_VERIFICATION, but for social accounts.

SOCIALACCOUNT_EMAIL_REQUIRED = ACCOUNT_EMAIL_REQUIRED
#The user is required to hand over an e-mail address when signing up using a social account.

SOCIALACCOUNT_AUTO_SIGNUP = True
#Attempt to bypass the signup form by using fields (e.g. username, email) retrieved from the social account provider. If a conflict arises due to a duplicate e-mail address the signup form will still kick in.

SOCIALACCOUNT_QUERY_EMAIL = True
#Request e-mail address from 3rd party account provider? E.g. using OpenID AX, or the Facebook 'email' permission.

SOCIALACCOUNT_ADAPTER ='mysite.myadapter.MySocialAccountAdapter'
#SOCIALACCOUNT_ADAPTER ='allauth.socialaccount.adapter.DefaultSocialAccountAdapter'
#Specifies the adapter class to use, allowing you to alter certain default behaviour.

"""

ACCOUNT_FORMS = {}
#Used to override forms, for example: {‘login’: ‘myapp.forms.LoginForm’}

ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300
#Time period, in seconds, from last unsuccessful login attempt, during which the user is prohibited from trying to log in.

ACCOUNT_LOGOUT_ON_GET = False
#Determines whether or not the user is automatically logged out by a mere GET request. See documentation for the LogoutView for details.

ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False
#Determines whether or not the user is automatically logged out after changing or setting their password. See documentation for Django’s session invalidation on password change. (Django 1.7+)

ACCOUNT_LOGOUT_REDIRECT_URL = '/'
#The URL (or URL name) to return to after the user logs out. This is the counterpart to Django’s LOGIN_REDIRECT_URL.

ACCOUNT_UNIQUE_EMAIL = True
#Enforce uniqueness of e-mail addresses.

ACCOUNT_USER_MODEL_EMAIL_FIELD = 'mail'
#The name of the field containing the email, if any. See custom user models.

ACCOUNT_USER_DISPLAY = a callable returning user.username
#A callable (or string of the form ‘some.module.callable_name’) that takes a user as its only argument and returns the display name of the user. The default implementation returns user.username.

ACCOUNT_USERNAME_MIN_LENGTH = 1
#An integer specifying the minimum allowed length of a username. Deprecated – use Django’s AUTH_PASSWORD_VALIDATORS instead.

ACCOUNT_USERNAME_BLACKLIST = []
#A list of usernames that can’t be used by user.

ACCOUNT_PASSWORD_INPUT_RENDER_VALUE = False
#render_value parameter as passed to PasswordInput fields.

ACCOUNT_PASSWORD_MIN_LENGTH = 6
#An integer specifying the minimum password length.

ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
#The default behaviour is not log users in and to redirect them to ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL.

#By changing this setting to True, users will automatically be logged in once they confirm their email address. Note however that this only works when confirming the email address immediately after signing up, assuming users didn’t close their browser or used some sort of private browsing mode.

ACCOUNT_LOGIN_ON_PASSWORD_RESET = False
#By changing this setting to True, users will automatically be logged in once they have reset their password. By default they are redirected to the password reset done page.

ACCOUNT_SESSION_REMEMBER = None
#Controls the life time of the session. Set to None to ask the user ('Remember me?''), False to not remember, and True to always remember.

ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True 
#The default behaviour is to redirect authenticated users to ACCOUNT_LOGIN_REDIRECT_URL when they try accessing login/signup pages.

#By changing this setting to False, logged in users will not be redirected when they access login/signup pages.

ACCOUNT_TEMPLATE_EXTENSION = 'html'
#A string defining the template extension to use, defaults to html.

SOCIALACCOUNT_FORMS ={}
#Used to override forms, for example: {‘signup’: ‘myapp.forms.SignupForm’}

"""